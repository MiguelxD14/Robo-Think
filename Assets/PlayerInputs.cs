//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""6b4020aa-70f0-4adc-a807-7f4a61ae800c"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""f4b88c13-60e0-457e-b44d-1e1019462fd9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Girar"",
                    ""type"": ""Value"",
                    ""id"": ""4eea8827-d613-461a-bd60-b18239e5c5d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pegar"",
                    ""type"": ""Button"",
                    ""id"": ""98ff0f76-822f-485a-bd52-d8a247cbd86a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Soltar"",
                    ""type"": ""Button"",
                    ""id"": ""3a749fef-3130-485d-85fa-f6361ff7ca2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Selecionar"",
                    ""type"": ""Button"",
                    ""id"": ""7322e8db-e2d3-47ab-b3dd-46f73a2b8b34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47fc685c-0087-493e-a6e0-9f3b73e851dd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91b84bef-72b0-41c5-88dd-f8198ac0fde4"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Girar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccf2e8e7-bd60-491a-87c4-0903b913c4ca"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pegar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c046ba8-b016-45a4-94b0-935fbff09271"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Soltar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df4851be-d603-48fa-94f9-1486d06cbdad"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Selecionar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Mover = m_Gameplay.FindAction("Mover", throwIfNotFound: true);
        m_Gameplay_Girar = m_Gameplay.FindAction("Girar", throwIfNotFound: true);
        m_Gameplay_Pegar = m_Gameplay.FindAction("Pegar", throwIfNotFound: true);
        m_Gameplay_Soltar = m_Gameplay.FindAction("Soltar", throwIfNotFound: true);
        m_Gameplay_Selecionar = m_Gameplay.FindAction("Selecionar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Mover;
    private readonly InputAction m_Gameplay_Girar;
    private readonly InputAction m_Gameplay_Pegar;
    private readonly InputAction m_Gameplay_Soltar;
    private readonly InputAction m_Gameplay_Selecionar;
    public struct GameplayActions
    {
        private @PlayerInputs m_Wrapper;
        public GameplayActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_Gameplay_Mover;
        public InputAction @Girar => m_Wrapper.m_Gameplay_Girar;
        public InputAction @Pegar => m_Wrapper.m_Gameplay_Pegar;
        public InputAction @Soltar => m_Wrapper.m_Gameplay_Soltar;
        public InputAction @Selecionar => m_Wrapper.m_Gameplay_Selecionar;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Mover.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMover;
                @Mover.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMover;
                @Mover.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMover;
                @Girar.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGirar;
                @Girar.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGirar;
                @Girar.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnGirar;
                @Pegar.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPegar;
                @Pegar.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPegar;
                @Pegar.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPegar;
                @Soltar.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSoltar;
                @Soltar.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSoltar;
                @Soltar.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSoltar;
                @Selecionar.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelecionar;
                @Selecionar.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelecionar;
                @Selecionar.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelecionar;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mover.started += instance.OnMover;
                @Mover.performed += instance.OnMover;
                @Mover.canceled += instance.OnMover;
                @Girar.started += instance.OnGirar;
                @Girar.performed += instance.OnGirar;
                @Girar.canceled += instance.OnGirar;
                @Pegar.started += instance.OnPegar;
                @Pegar.performed += instance.OnPegar;
                @Pegar.canceled += instance.OnPegar;
                @Soltar.started += instance.OnSoltar;
                @Soltar.performed += instance.OnSoltar;
                @Soltar.canceled += instance.OnSoltar;
                @Selecionar.started += instance.OnSelecionar;
                @Selecionar.performed += instance.OnSelecionar;
                @Selecionar.canceled += instance.OnSelecionar;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnGirar(InputAction.CallbackContext context);
        void OnPegar(InputAction.CallbackContext context);
        void OnSoltar(InputAction.CallbackContext context);
        void OnSelecionar(InputAction.CallbackContext context);
    }
}
